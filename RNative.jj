
PARSER_BEGIN(RNative)

  public class RNative{

    public static void main ( String args[ ] ) {      
      RNative parser;
      if(args.length == 0){
        System.out.print("Ingrese cadena");
        parser = new RNative(System.in);
      }
      else{      
        try {
          parser = new RNative(new java.io.FileInputStream(args[0]));
            System.out.println ("Analizando archivo" + args[0]+"\n\n");
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("El fichero " + args[0] + " no ha sido encontrado.\n");
          return;
        }
      }  
      try {
        parser.startSintatico();
        System.out.println ("El archivo es valido.");
      }
      catch(ParseException e){
        System.out.println ("Ha ocurrido un error durante el analisis.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("Ha ocurrido un error.");
        System.out.println (e.getMessage());
      }       
    }        
   
  } 

PARSER_END(RNative)


SKIP : { " " |  "\t"|  "\n"| "\r"| "\r\n"}
//palabras reservadas
TOKEN:{
      <IMPORT :"import">{} 
      |<CLASS:"class"> {} 
      |<EXTENDS :"extends"> {} 
      |<RETURN:"return"> {} 
      |<RENDER:"render"> {} 
      |<SUPER:"super"> {} 
      |<THIS:"this"> {} 
      |<IF:"if"> {}  
      |<ELSE:"else"> {}             
      |<FOR:"for"> {}  
      |<WHILE:"while"> {}  
      |<DO:"do"> {} 
      |<LET:"let"> {} 
      |<CONST:"const"> {} 
      |<SWITCH:"switch">{} 
      |<BREAK:"break">{} 
      |<CASE:"case"> {} 
      |<CONSTRUCTOR:"constructor"> {} 
      |<FUNCION:"function">{}                 
      |<NULL:"null"> {}  
      |<DEFAUL:"default"> {}  
      |<FROM:"from"> {} 
      |<VAR:"var"> {} 
      |<DATO_LOGICO:"true"|"false"> {} 
      |<KEY:"key"> {} 
      }

TOKEN: {
      <PUNTOYCOMA : ";"> {}     
      |<COMA : ","> {} 
      |<GUION: "-">{}
      |<MAS: "+">{}
      |<MASMAS: "++"|"--">{}
      |<MENOR: "<">{}
      |<MAYOR: ">">{}
      |<IGUAL: "=">{}
      |<DOSPUNTO: ":">{} 
      |<PUNTO: ".">{} 
      |<BARRA: "/">{}      
      |<BARRAI: "\\">{}   
      |<PARENIZQ : "("> {}
      |<PARENDER : ")"> {}            
      |<CORCHETED: "]">{} 
      |<CORCHETEI: "[">{} 
      |<LLAVEIZQ : "{"> {}
      |<LLAVEDER : "}"> {}
      |<COMSIMPPLE : "\'"> {}
      |<FLECHA: "=>">{}     
    }
TOKEN:{
  <ATRIBUTO:"width"|"height"|"backgroundColor"|"alignItems"|"justifyContent"|"textAlign"
                 |"marginTop"|"marginLeft"|"marginRight"|"marginBottom"|"borderRadius"
                 |"borderWidth"|"padding"|"color"|"flex"|"fontSize">{}

  |<OBJETO:"ActivityIndicator"|"Menu"|"AppRegistry"|"StyleSheet"|"Text"|"View"|"Image"
                 |"Button"|"AppRegistry"|"Navigator"|"TouchableHighlight"|"Component"
                 |"DatePickerIOS"|"requireNativeComponent"
                 |"ul"|"h1"|"h2"|"h3"|"h"|"p"|"u">{}

}
//clase
TOKEN: {
      <IDENTIFICADOR: (["A"-"Z","a"-"z"])(["A"-"Z","a"-"z","0"-"9","_"])*>{}               
      |<NUMERO: (["0"-"9"])+(<PUNTO>)?(["0"-"9"])*>{}  
      |<TEXT:(["A"-"Z","a"-"z","0"-"9","_","-"])+> {}      
      |<LIBRERIA:<COMSIMPPLE>(<PUNTO><BARRAI>)?(["A"-"Z","a"-"z","_","-"])*<COMSIMPPLE>>{}
      |<PAQUETE: (<IDENTIFICADOR><PUNTO>)*<IDENTIFICADOR>>{}
      |<COMENTARIO:<BARRA><BARRA><TEXT>>{}
      |<COLOR:<COMSIMPPLE>"rgba"<PARENIZQ><NUMERO><COMA><NUMERO><COMA><NUMERO><COMA><NUMERO><PARENDER><COMSIMPPLE>>{}      
     
    }
    /*
    _estilos()|_import()|_arreglo()|__clase()|_funcion()|_etiqueta()|_if()
      |_for()|_switch()|_while()|_do_while()
      */
void startSintatico():{}{
    (_import())*(__clase())*<EOF>
}

void _arreglo():{Token token=null;}{
   token =<IDENTIFICADOR><IGUAL><LLAVEIZQ><CORCHETEI>
    (<LLAVEIZQ><KEY><DOSPUNTO><LIBRERIA>(<LLAVEDER>)(<COMA><LLAVEIZQ><KEY><DOSPUNTO><LIBRERIA><LLAVEDER>)*
      |<COMSIMPPLE><TEXT><COMSIMPPLE>(<COMA><COMSIMPPLE><TEXT><COMSIMPPLE>)*)
    <CORCHETED><LLAVEDER>{System.out.println("Arreglo de nombre: " + token.image+"\t\t\t--> valida");}
}


void __funcion():{Token token=null;}{
 token=<IDENTIFICADOR><DOSPUNTO><FUNCION><PARENIZQ><IDENTIFICADOR>(<COMA><IDENTIFICADOR>)*<PARENDER><LLAVEIZQ>
 (_if()|_while()|_switch()|_do_while()|_for()|_return()|_daclaracion_dato())*
 <LLAVEDER>
 {System.out.println("Funcion: " + token.image+"\t\t\t--> valida");}
}

void __clase():{Token token=null;}{
  <CLASS>token=<IDENTIFICADOR>(<EXTENDS>(<OBJETO>|<PAQUETE>))?<LLAVEIZQ>
  (__funcion()|_constructor()|_render())*
  <LLAVEDER>
    {System.out.println("clase: " + token.image+"\t\t\t--> valida");}
}
void _constructor():{}{
  <CONSTRUCTOR><PARENIZQ>(<IDENTIFICADOR>(<COMA><IDENTIFICADOR>)*)?<PARENDER>
  <LLAVEIZQ>
    _super()
  <LLAVEDER>
{System.out.println("Constructor: \t\t\t--> valido");}
}
void _super():{}{
  <SUPER><PARENIZQ><IDENTIFICADOR>(<COMA><IDENTIFICADOR>)*<PARENDER>
}
void _import():{Token token=null;}{
  <IMPORT>(<IDENTIFICADOR>)?(<COMA>)?(<LLAVEIZQ><OBJETO>
  (<COMA><OBJETO>)*<LLAVEDER>)?<FROM><LIBRERIA>(<PUNTOYCOMA>)? 
  {System.out.println("import \t\t\t\t--> valido");}
}
void _atributos():{Token token=null;}{
  <LLAVEIZQ><ATRIBUTO><DOSPUNTO>(<LIBRERIA>|<NUMERO>|<COLOR>)
  (<COMA><ATRIBUTO><DOSPUNTO>(<LIBRERIA>|<NUMERO>|<COLOR>))*<LLAVEDER>
   {System.out.println("atributo \t\t\t--> valido");}
}
void _render():{}{
    <RENDER><PARENIZQ><PARENDER><LLAVEIZQ>
   ( (_arreglo())*)_return()
    <LLAVEDER>
     {System.out.println("render  \t\t\t\t--> valido");}
}
void _return():{}{
  <RETURN>((<PARENIZQ>(_etiqueta())<PARENDER>)|<NULL>|<NUMERO>)
   {System.out.println("return \t\t\t\t--> valido");}
}
void _atrib_estiqueta():{Token token=null;}{
 <IDENTIFICADOR><IGUAL><LLAVEIZQ>(<LLAVEIZQ>)?(<PAQUETE>|<IDENTIFICADOR>)<LLAVEDER>(<LLAVEDER>)? 
}
  
void _estilos():{Token token=null;}{
  <CONST>token=<IDENTIFICADOR><IGUAL><PAQUETE><PARENIZQ><LLAVEIZQ><IDENTIFICADOR><DOSPUNTO>_atributos()
  (<COMA><IDENTIFICADOR><DOSPUNTO>_atributos())*<LLAVEDER><PARENDER>
   {System.out.println("Definicion de estilo:" + token.image+"\t\t\t--> valida");}
}
void _etiqueta():{Token token=null;}{
  <MENOR>token=<OBJETO>(_atrib_estiqueta())*(<MAYOR>)?(LOOKAHEAD(2)_etiqueta())*(<MENOR>)?<BARRA>(<OBJETO>)?<MAYOR>
   {System.out.println("Objeto de nombre: " + token.image+"\t\t\t--> valida");}

}


void _if():{}{
 (<ELSE>)?<IF>  {System.out.println("Estructura if encontrada\t\t\t"+"--> valida");}
 <PARENIZQ>_condicion()<PARENDER><LLAVEIZQ>
 /**/
 (_asigna_valor()|_if()|_for()|_while()|_switch()|_do_while()|_daclaracion_dato()|_return())*
 /**/
 <LLAVEDER>(LOOKAHEAD(2)<ELSE>{System.out.println("Estructura else encontrada\t\t\t"+"--> valida");}
  <LLAVEIZQ>
  /**/
  (_asigna_valor()|_if()|_for()|_while()|_switch()|_do_while()|_return())*
  /**/
  <LLAVEDER>)?

}
void _daclaracion_dato():{Token token=null;}{
  (<VAR>|<CONST>)token=<IDENTIFICADOR><IGUAL>(<NUMERO>|<COMSIMPPLE><TEXT><COMSIMPPLE>|<DATO_LOGICO>)<PUNTOYCOMA>
  {System.out.println("varible " + token.image+"\t\t\t--> valida");} 
}

void _switch():{}{
  <SWITCH><PARENIZQ><IDENTIFICADOR><PARENDER><LLAVEIZQ>
  (_case())*(<DEFAUL><DOSPUNTO>)?
  <LLAVEDER>
  {System.out.println("Estructura switch encontrada\t\t\t"+"--> valida");}
}
void _case():{}{
  <CASE><IDENTIFICADOR><DOSPUNTO>
  /**/
  (_asigna_valor()|_if()|_for()|_while()|_switch()|_daclaracion_dato()|_do_while()|_return())*
  /**/
  <BREAK><PUNTOYCOMA>
}
void _while():{}{
  <WHILE><PARENIZQ>_condicion()<PARENDER><LLAVEIZQ>
  /**/
  (_asigna_valor()|_if()|_while()|_for()|_daclaracion_dato()|_switch()|_do_while()|_return())*
  /**/<LLAVEDER>
    {System.out.println("Estructura while encontrada\t\t\t"+"--> valida");}
}
void _do_while():{}{
   <DO><LLAVEIZQ>
   /**/
   (_asigna_valor()|_if()|_while()|_daclaracion_dato()|_switch()|_for()|_do_while()|_return())*
   /**/<LLAVEDER> <WHILE><PARENIZQ>_condicion()<PARENDER><PUNTOYCOMA>
     {System.out.println("Estructura do while encontrada\t\t\t"+"--> valida");}
}

void _for():{}{
  <FOR><PARENIZQ>_condicion_for()<PARENDER><LLAVEIZQ>
  /**/
  (_asigna_valor()|_if()|_while()|_for()|_daclaracion_dato()|_switch()|_do_while()|_return())*
  /**/
  <LLAVEDER>
    {System.out.println("Estructura for encontrada\t\t\t"+"--> valida");}
}
void _condicion():{}{
    (<IDENTIFICADOR>((<MAYOR>|<MENOR>|<IGUAL>)(<IDENTIFICADOR>|<NUMERO>))?)
}

void _operacio():{}{
(<IDENTIFICADOR>|<NUMERO>)((<MAS>|<GUION>|"*"|"^"|<BARRA>)(<IDENTIFICADOR>|<NUMERO>))*
}

void _condicion_for():{}{
  (_asigna_valor()|_daclaracion_dato())_condicion()<PUNTOYCOMA>_asigna_valor()
}
void _asigna_valor():{}{
  (<OBJETO>)?<IDENTIFICADOR>(<MASMAS>|(<IGUAL>_operacio()))(<PUNTOYCOMA>)?
}


